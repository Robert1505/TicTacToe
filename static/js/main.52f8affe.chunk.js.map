{"version":3,"sources":["App.tsx","Helpers.tsx","reportWebVitals.ts","index.tsx"],"names":["GameState","checkRow","cellsContent","rowIndex","startIndex","checkColumn","columnIndex","App","useState","Array","fill","setCellsContent","nextChar","setNextChar","IN_PROGRESS","gameState","setGameState","x","o","score","setScore","useEffect","checkGameState","renderGridItem","cellIndex","className","onClick","newCellsContent","fillCell","modifyScore","checkDiagonals","WON","findIndex","checkDraw","DRAW","restartGame","renderRestartButton","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.52f8affe.chunk.js","sourcesContent":["import React, { ReactElement, useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport { checkColumn, checkDiagonals, checkDraw, checkRow } from \"./Helpers\";\r\n\r\ninterface Props {}\r\n\r\nexport enum GameState {\r\n  IN_PROGRESS,\r\n  WON,\r\n  DRAW,\r\n}\r\n\r\nexport default function App({}: Props): ReactElement {\r\n  const [cellsContent, setCellsContent] = useState<string[]>(\r\n    new Array(9).fill(\"\")\r\n  );\r\n  const [nextChar, setNextChar] = useState(\"O\");\r\n  const [gameState, setGameState] = useState(GameState.IN_PROGRESS);\r\n\r\n  const [score, setScore] = useState({\r\n    x: 0,\r\n    o: 0,\r\n  });\r\n\r\n  const fillCell = (cellIndex: number) => {\r\n    if (gameState !== GameState.IN_PROGRESS) return;\r\n    if (cellsContent[cellIndex] !== \"\") return;\r\n    const newCellsContent = [...cellsContent];\r\n    newCellsContent[cellIndex] = nextChar;\r\n    setCellsContent(newCellsContent);\r\n  };\r\n\r\n  useEffect(() => {\r\n    checkGameState();\r\n  }, [cellsContent]);\r\n\r\n  const renderGridItem = (cellIndex: number) => {\r\n    return (\r\n      <div className=\"grid-item\" onClick={() => fillCell(cellIndex)}>\r\n        {cellsContent[cellIndex]}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const modifyScore = () => {\r\n    if (nextChar === \"X\") setScore({ ...score, x: score.x + 1 });\r\n    if (nextChar === \"O\") setScore({ ...score, o: score.o + 1 });\r\n  };\r\n\r\n  const checkGameState = () => {\r\n    if (\r\n      checkRow(cellsContent, 0) ||\r\n      checkRow(cellsContent, 1) ||\r\n      checkRow(cellsContent, 2)\r\n    ) {\r\n      setGameState(GameState.WON);\r\n      modifyScore();\r\n      return;\r\n    }\r\n    if (checkColumn(cellsContent, 0) || checkColumn(cellsContent, 1) || checkColumn(cellsContent, 2)) {\r\n      setGameState(GameState.WON);\r\n      modifyScore();\r\n      return;\r\n    }\r\n    if (checkDiagonals(cellsContent)) {\r\n      setGameState(GameState.WON);\r\n      modifyScore();\r\n      return;\r\n    }\r\n    if (checkDraw(cellsContent, gameState)) {\r\n      setGameState(GameState.DRAW);\r\n      return;\r\n    }\r\n\r\n    if (gameState === GameState.IN_PROGRESS)\r\n      if (nextChar === \"X\") setNextChar(\"O\");\r\n      else setNextChar(\"X\");\r\n  };\r\n\r\n  const restartGame = () => {\r\n    setCellsContent(new Array(9).fill(\"\"));\r\n    setGameState(GameState.IN_PROGRESS);\r\n  };\r\n\r\n  const renderRestartButton = () => {\r\n    if (gameState !== GameState.IN_PROGRESS)\r\n      return (\r\n        <>\r\n          <button className = \"restartButton\" onClick={restartGame}>Restart</button>\r\n        </>\r\n      );\r\n  };\r\n\r\n  const renderText = () => {\r\n    if (GameState.IN_PROGRESS === gameState)\r\n      return (\r\n        <>\r\n          Player <span className=\"character\">{nextChar}</span>'s turn!\r\n        </>\r\n      );\r\n    if (GameState.WON === gameState) return <>Game Won by {nextChar}!</>;\r\n    if (GameState.DRAW === gameState) return <>Draw!</>;\r\n  };\r\n\r\n  return (\r\n    <div className=\"background\">\r\n      <div className=\"grid\">\r\n        <div className = \"score\">\r\n          <span className = \"scorex\">X: {score.x}</span>\r\n          <span>O: {score.o}</span>\r\n        </div>\r\n        <div className=\"text\">{renderText()}</div>\r\n        <div>{renderRestartButton()}</div>\r\n        <div className=\"grid-3\">\r\n          {renderGridItem(0)}\r\n          {renderGridItem(1)}\r\n          {renderGridItem(2)}\r\n        </div>\r\n        <div className=\"grid-3\">\r\n          {renderGridItem(3)}\r\n          {renderGridItem(4)}\r\n          {renderGridItem(5)}\r\n        </div>\r\n        <div className=\"grid-3\">\r\n          {renderGridItem(6)}\r\n          {renderGridItem(7)}\r\n          {renderGridItem(8)}\r\n        </div>\r\n      </div>\r\n     \r\n    </div>\r\n  );\r\n}\r\n","import { GameState } from \"./App\";\r\n\r\nexport const checkRow = (cellsContent: string[], rowIndex: number): boolean => {\r\n  const startIndex = rowIndex * 3;\r\n  if (\r\n    cellsContent[startIndex] === cellsContent[startIndex + 1] &&\r\n    cellsContent[startIndex + 1] === cellsContent[startIndex + 2] &&\r\n    cellsContent[startIndex] !== \"\"\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const checkColumn = (cellsContent: string[], columnIndex: number): boolean => {\r\n    const startIndex = columnIndex;\r\n    if (\r\n      cellsContent[startIndex] === cellsContent[startIndex + 3] &&\r\n      cellsContent[startIndex] === cellsContent[startIndex + 6] &&\r\n      cellsContent[startIndex] !== \"\"\r\n    ) {\r\n      return true;\r\n    }\r\n    return false;\r\n};\r\n\r\nexport const checkDiagonals = (cellsContent: string[]) => {\r\n    if (\r\n      cellsContent[0] === cellsContent[4] &&\r\n      cellsContent[0] === cellsContent[8] &&\r\n      cellsContent[0] !== \"\"\r\n    )\r\n      return true;\r\n    if (\r\n      cellsContent[2] === cellsContent[4] &&\r\n      cellsContent[2] === cellsContent[6] &&\r\n      cellsContent[2] !== \"\"\r\n    )\r\n      return true;\r\n};\r\n\r\nexport const checkDraw = (cellsContent: string[], gameState: GameState) => {\r\n    return (\r\n      cellsContent.findIndex((x) => x === \"\") === -1 &&\r\n      gameState !== GameState.WON\r\n    );\r\n  };\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}